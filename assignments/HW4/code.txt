import numpy as np
from sklearn.cluster import KMeans

data=np.loadtxt("Filter Response35.txt")
print(data.shape)

estimator=KMeans(n_clusters=6)
estimator.fit(data)
count=[0,0,0,0,0,0]
fout=open("color35.txt",'w')
for i in estimator.labels_:
    count[i]+=1
    fout.write(str(i))
print(count)
fout.close()

import numpy as np
from sklearn import svm

data=[[24.67179052029746, 175.6614820064008, 141.6495598080874, 121.7339169473621, 121.0423498188605, 135.1350523969506, 8.515445351825049, 30.28615188534471, 16.09844549730406, 121.3301969050395, 149.3429028037335, 81.93119699521273, 270.6131149376404, 76.79070746188057, 93.62753620114644, 16.46222459964396, 75.51574620229525, 90.74653579268545, 98.47913960825771, 102.208223708645, 90.74249463436303, 98.5062032698024, 85.89119705389393, 99.43012004784502, 96.59808796919724, 75.40770919580461, 75.53057032779884, 154.419570180126, 80.32016718992119, 431.7336884211734, 89.44624761309846, 198.9109335909879, 184.4780219444984, 87.35633069475749, 256.1731958602892, 43.76458187190309],[ 14.8567348184379, 130.2341296550751, -78.39385063905148, -57.55228172783015, -55.98318203150847, -69.44192535922205, -4.830758492250993, -13.92713798949937, -8.255971504997374, 18.1227173959611, -16.25495922013599, -36.6855577035989, -113.48666880566, -40.19766793009028, -45.83133251613542, -7.152273571566551, -38.34612468785388, -40.61365562030078, -53.70853674672392, -52.11378316013004, -39.7071206706494, -38.48540700807889, -36.65285140668549, -36.30590218183465, -35.84702501007261, -37.46965333893656, -37.53915678145664, -48.23754942768235, -15.6470577250771, -5.555291737661461, -32.9561379416179, -37.57182950558721, 32.37684877092143, -0.02647438130965929, 6.699004974935601, -16.55616713170318],[ -0.05049968900183538, -19.05557300174047, -49.4103213498189, -43.27284613479579, -37.10681386695867, -39.42307998524436, -3.247021540714663, -11.98908402581405, -8.389903090750167, 35.10167660733104, 14.5028938538794, 1.393185788133755, 31.42993445057757, -7.286891914724019, 9.89689667962846, -4.790655691649555, 6.621925472694887, 6.965287861950958, -29.29005758953086, -23.7098367363573, -31.27456514429631, -29.835279016428, -30.72285400656479, -46.49092903234762, -37.62628477014717, -30.48892995756912, -37.52295698383392, 1.771320876899097, -26.09884116522759, -20.86778246757565, -18.74539305915576, 61.630905943273, -40.03897816084442, -3.588576913213299, -63.89537870932907, -16.22867785720476]]
data=np.transpose(np.array(data))
lables=[int(i/9) for i in range(36)]
clf=svm.SVC(decision_function_shape='ovr',gamma=0.0005)
clf.fit(data,lables)

classes=["blanket","brick","grass","stones"]
FV3D=[[97.83190412179189, 134.6832097701879, 19.42386353305313, 259.6362805164526, 179.1467249708653, 98.31154172723892, 303.4651838341876, 133.119825402771, 125.7772615141092, 98.78999152281031, 196.5542020868381, 95.22127602608641],[ -44.03779090636022, -72.30156242293523, -10.02929570930084, -11.31384732572822, -23.21901488432125, -41.86541884433624, -136.7096923180677, 6.214849884354844, -62.79997160757496, -29.3165314167973, 34.59998459583534, -42.7380883024578],[ -28.85282663273111, -56.44126550355366, -7.149075149178693, 43.60172149864906, -47.60229963897803, -33.49718559243989,-40.91525261706292, 12.7738945402153, -9.167502179166561, 10.39519855268279, 36.42629366912953, -35.40287829154478]]
FV3D=np.array(np.transpose(FV3D))
for i in range(36):
    #print('%d.'%(i+1),classes[(clf.predict(np.reshape(FV3D[i, :],(1,3))))[0]])
    print('%d.' % (i + 1), classes[(clf.predict(np.reshape(data[i, :], (1, 3))))[0]])


import numpy as np
from sklearn.ensemble import RandomForestClassifier

data=[[24.67179052029746, 175.6614820064008, 141.6495598080874, 121.7339169473621, 121.0423498188605, 135.1350523969506, 8.515445351825049, 30.28615188534471, 16.09844549730406, 121.3301969050395, 149.3429028037335, 81.93119699521273, 270.6131149376404, 76.79070746188057, 93.62753620114644, 16.46222459964396, 75.51574620229525, 90.74653579268545, 98.47913960825771, 102.208223708645, 90.74249463436303, 98.5062032698024, 85.89119705389393, 99.43012004784502, 96.59808796919724, 75.40770919580461, 75.53057032779884, 154.419570180126, 80.32016718992119, 431.7336884211734, 89.44624761309846, 198.9109335909879, 184.4780219444984, 87.35633069475749, 256.1731958602892, 43.76458187190309],[ 14.8567348184379, 130.2341296550751, -78.39385063905148, -57.55228172783015, -55.98318203150847, -69.44192535922205, -4.830758492250993, -13.92713798949937, -8.255971504997374, 18.1227173959611, -16.25495922013599, -36.6855577035989, -113.48666880566, -40.19766793009028, -45.83133251613542, -7.152273571566551, -38.34612468785388, -40.61365562030078, -53.70853674672392, -52.11378316013004, -39.7071206706494, -38.48540700807889, -36.65285140668549, -36.30590218183465, -35.84702501007261, -37.46965333893656, -37.53915678145664, -48.23754942768235, -15.6470577250771, -5.555291737661461, -32.9561379416179, -37.57182950558721, 32.37684877092143, -0.02647438130965929, 6.699004974935601, -16.55616713170318],[ -0.05049968900183538, -19.05557300174047, -49.4103213498189, -43.27284613479579, -37.10681386695867, -39.42307998524436, -3.247021540714663, -11.98908402581405, -8.389903090750167, 35.10167660733104, 14.5028938538794, 1.393185788133755, 31.42993445057757, -7.286891914724019, 9.89689667962846, -4.790655691649555, 6.621925472694887, 6.965287861950958, -29.29005758953086, -23.7098367363573, -31.27456514429631, -29.835279016428, -30.72285400656479, -46.49092903234762, -37.62628477014717, -30.48892995756912, -37.52295698383392, 1.771320876899097, -26.09884116522759, -20.86778246757565, -18.74539305915576, 61.630905943273, -40.03897816084442, -3.588576913213299, -63.89537870932907, -16.22867785720476]]
data=np.transpose(np.array(data))
print(data.shape)
lables=[int(i/9) for i in range(36)]

rf=RandomForestClassifier(n_estimators=200,min_samples_leaf=1,min_samples_split=2)
rf.fit(data,lables)

classes=["blanket","brick","grass","stones"]
FV3D=[[97.83190412179189, 134.6832097701879, 19.42386353305313, 259.6362805164526, 179.1467249708653, 98.31154172723892, 303.4651838341876, 133.119825402771, 125.7772615141092, 98.78999152281031, 196.5542020868381, 95.22127602608641],[ -44.03779090636022, -72.30156242293523, -10.02929570930084, -11.31384732572822, -23.21901488432125, -41.86541884433624, -136.7096923180677, 6.214849884354844, -62.79997160757496, -29.3165314167973, 34.59998459583534, -42.7380883024578],[ -28.85282663273111, -56.44126550355366, -7.149075149178693, 43.60172149864906, -47.60229963897803, -33.49718559243989,-40.91525261706292, 12.7738945402153, -9.167502179166561, 10.39519855268279, 36.42629366912953, -35.40287829154478]]
FV3D=np.array(np.transpose(FV3D))
for i in range(12):
    print('%d.'%(i+1),classes[(rf.predict(np.reshape(FV3D[i, :],(1,3))))[0]])
    #print(rf.predict(np.reshape(FV3D[i, :],(1,3))))
    #print('%d.' % (i + 1), classes[(rf.predict(np.reshape(data[i, :], (1, 3))))[0]])

import numpy as np
from sklearn.cluster import KMeans

FV25D=[[85.58013449980322, 35.92713447896394, 10.8406096184837, 9.05202696322481, 22.74329345703114, 43.18976144710754, 3.16649754695463, 1.09718916421117, 0.962920812645673, 2.496308147895359, 14.6871443271895, 1.255631954394018, 0.4777929208792823, 0.4424936331954569, 1.195721857466163, 12.55468274390417, 1.205356557010806, 0.489520111142639, 0.4758929042090089,1.373431602516137, 30.95805597325078, 3.236580800691172, 1.422618326071981, 1.504411337624029, 5.038678990840383],
       [ 141.722373522145, 35.20489161789482, 18.8556723985739, 19.29515267283762, 34.98201277096696, 43.7153718606202, 2.598398216919312, 0.8803448502754333, 0.7623559870677699, 2.191134833394898, 23.47807254214876, 0.7614897337036807, 0.2904455702509224, 0.2975998611186189, 0.9459278592143043, 19.65316678174416, 0.6375803899416639, 0.2741027423722228, 0.2988765635888219, 0.9615310376793154, 30.05018528874838, 1.852239287661284, 0.8225332063163763, 0.9146886836267918, 3.182598828613122],
       [ 17.56770475778703, 9.855214183885071, 2.749236757835038, 1.600511710677644, 3.000156115774315, 10.29219975208604, 0.5224551301257185, 0.1617835359672366, 0.1181208446345723, 0.2568398844870403, 2.279076813342503, 0.1932844273011013, 0.06753951398650924, 0.05886892304792773, 0.1342381995881978, 2.066945898399899, 0.2029615008725631, 0.08240380521464036, 0.08834781563130596, 0.2183518179981895, 5.156031890716624, 0.5653800455729063, 0.2422575310953166, 0.267503192319362, 0.6965526339403645],
       [ 133.1845024002877, 40.16617833848488, 10.9202270592291, 10.83563127575631, 58.24422474791916, 78.93784049591827, 4.396340794781492, 1.431103341037685, 1.53477291073443, 8.456250707735611, 29.71535124523895, 2.143225230004659, 0.8299561222696751, 0.9841076054732492, 5.545615131124472, 32.72359009493034, 2.972679229818477, 1.314066872191571, 1.671459649308532, 9.734352887486207, 181.2813130372777, 19.35437213714393, 9.390688735627585, 12.4460680819127, 72.72586926264857],
       [ 112.2074611185586, 84.02499178407187, 15.73028375410758, 13.24932192452286, 61.95830766618499, 81.35532793783455, 3.792954631894933, 1.234650178679753, 1.357630042193781, 7.380039857529204, 15.88424454292695, 1.288688852206751, 0.5593004559168894, 0.7197617418405762, 4.281924431671436, 13.3875975952385, 1.460540769137745, 0.7507935565272384, 1.075158238981088, 6.841453534059841, 63.49752763266451, 8.331440941247045, 4.695513458427931, 6.89743096010991, 46.14166591481521],
       [ 86.02964187596876, 38.62929009143901, 12.86891650465737, 11.15041375030806, 26.65918442294537, 39.27905725205622, 3.143346497778845, 1.205529740101435, 1.105424462083384, 2.848388413748653, 13.28432065360247, 1.226873653049579, 0.5070831653165115, 0.4895529635912163, 1.335034847061496, 11.97296180499252, 1.153644745447948, 0.4967848913653887, 0.5010436199793836, 1.480534868837974, 29.98995874952659, 2.979940652521026, 1.352989487404152, 1.473548572251319, 5.212298159249102],
       [ 250.8904739063256, 65.12861307287235, 20.89761688901202, 18.11336778710407, 58.69388081845053, 172.0577304984123, 3.537371989964833, 1.764131950076254, 2.101988461093653, 7.415567403087091, 53.96464792875676, 1.771013193918771, 0.9567004671430424, 1.201463403874086, 4.36014742113911, 40.12926230859277, 2.164231859065604, 1.222111250405468, 1.592844479512057, 5.97361095154203, 107.730703194459, 8.223470444435412, 4.77487688216374, 6.379167284292669, 24.50121115714197],
       [ 64.171676044942, 26.07220914225432, 5.361628104462465, 5.242637538183913, 30.35588174188553, 51.02362164360663, 2.087346521808003, 0.6667153755842109, 0.8249725550644534, 5.207836098383121, 13.7800972929959, 0.9769635335943452, 0.410988041145525, 0.5667723060616657, 3.644997691880886, 14.62525558547959, 1.433486287763388, 0.711116492342184, 1.03354506924169, 6.643127107249835, 79.97899698001524, 9.659598307479465, 5.441265233211051, 8.423980771555692, 54.16806038111148],
       [ 104.5045621174611, 25.01851442729342, 9.230282024191414, 6.860644565041004, 23.93011052314596, 65.52410409683254, 0.3016112229971664, 0.1329738449454501, 0.1540595226295147, 0.7502782395893389, 20.49993316497869, 0.1143465516568122, 0.04857915600370082, 0.05652877273764925, 0.2683449987685053, 15.55342877814453, 0.1384387878159802, 0.05137910824562721, 0.05738645067402018, 0.2663845673839398, 55.11882021413136, 0.6433081814986934, 0.2163225945249453, 0.2359996418144492, 1.081765280330867],
       [ 62.85482125276475, 15.71993181802849, 4.920072028524216, 4.709804643383896, 20.83826803486781, 46.89197003650256, 1.246549555196592, 0.4923934914230569, 0.5289296193546212, 2.499370315240824, 14.0884896668726, 0.6100449731248138, 0.2571561052615006, 0.2825026216253941, 1.320834738479468, 13.63258205321432, 0.7849961637726379, 0.3403400669589162, 0.3808876177807116, 1.80966586713188, 58.62741963821828, 4.540576326750871, 2.059076512977237, 2.296385931229854, 10.25699558256596],
       [ 55.05136276270387, 19.41210015284845, 13.96284103000513, 17.17292288328871, 147.1193899835316, 18.38700565418815, 6.597572364557758, 5.370290989155327, 5.476753208463976, 10.58653375035295, 12.25982517522559, 4.613820457238497, 3.779230842517006, 3.830332796242768, 7.104384028791494, 14.9772780779554, 3.563549985845337, 2.863788704877641, 2.954102147273616, 6.342727154031759, 162.2016248661503, 5.737060519654446, 4.038819214477332, 5.112446338810491, 28.36295869808911],
       [ 86.14329540130451, 38.81093606106308, 12.80619855024975, 10.49738261256944, 24.96354828502697, 37.85032398803236, 2.966826535129246, 1.107556760583355, 0.997193033290979, 2.543317202781095, 13.05271874380506, 1.150638706980173, 0.4554715987766003, 0.4303496579966145, 1.136754165878198, 11.29223259139371, 1.093874853384209, 0.4519569837547357, 0.4457359389642713, 1.256233050952431, 26.89395699201461, 2.85569253994109, 1.24781636250929, 1.338322470436528, 4.431105459551355]]
FV25D=np.array(FV25D)
estimator=KMeans(n_clusters=4)
estimator.fit(FV25D)
print(estimator.labels_)


FV3D=[[97.83190412179189, 134.6832097701879, 19.42386353305313, 259.6362805164526, 179.1467249708653, 98.31154172723892, 303.4651838341876, 133.119825402771, 125.7772615141092, 98.78999152281031, 196.5542020868381, 95.22127602608641],[ -44.03779090636022, -72.30156242293523, -10.02929570930084, -11.31384732572822, -23.21901488432125, -41.86541884433624, -136.7096923180677, 6.214849884354844, -62.79997160757496, -29.3165314167973, 34.59998459583534, -42.7380883024578],[ -28.85282663273111, -56.44126550355366, -7.149075149178693, 43.60172149864906, -47.60229963897803, -33.49718559243989,-40.91525261706292, 12.7738945402153, -9.167502179166561, 10.39519855268279, 36.42629366912953, -35.40287829154478]]
FV3D=np.array(np.transpose(FV3D))
print(FV3D.shape)
estimator2=KMeans(n_clusters=4)
estimator2.fit(FV3D)
print(estimator2.labels_)


import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

data=[[24.67179052029746, 175.6614820064008, 141.6495598080874, 121.7339169473621, 121.0423498188605, 135.1350523969506, 8.515445351825049,
      30.28615188534471, 16.09844549730406, 121.3301969050395, 149.3429028037335, 81.93119699521273, 270.6131149376404, 76.79070746188057,
      93.62753620114644, 16.46222459964396, 75.51574620229525, 90.74653579268545, 98.47913960825771, 102.208223708645, 90.74249463436303,
      98.5062032698024, 85.89119705389393, 99.43012004784502, 96.59808796919724, 75.40770919580461, 75.53057032779884, 154.419570180126,
      80.32016718992119, 431.7336884211734, 89.44624761309846, 198.9109335909879, 184.4780219444984, 87.35633069475749, 256.1731958602892,
      43.76458187190309],
        [14.8567348184379, 130.2341296550751, -78.39385063905148, -57.55228172783015, -55.98318203150847, -69.44192535922205, -4.830758492250993,
         -13.92713798949937, -8.255971504997374, 18.1227173959611, -16.25495922013599, -36.6855577035989, -113.48666880566, -40.19766793009028,
         -45.83133251613542, -7.152273571566551, -38.34612468785388, -40.61365562030078, -53.70853674672392, -52.11378316013004, -39.7071206706494,
         -38.48540700807889, -36.65285140668549, -36.30590218183465, -35.84702501007261, -37.46965333893656, -37.53915678145664, -48.23754942768235,
         -15.6470577250771, -5.555291737661461, -32.9561379416179, -37.57182950558721, 32.37684877092143, -0.02647438130965929, 6.699004974935601, -16.55616713170318],
        [-0.05049968900183538, -19.05557300174047, -49.4103213498189, -43.27284613479579, -37.10681386695867, -39.42307998524436, -3.247021540714663,
         -11.98908402581405, -8.389903090750167, 35.10167660733104, 14.5028938538794, 1.393185788133755, 31.42993445057757, -7.286891914724019,
         9.89689667962846, -4.790655691649555, 6.621925472694887, 6.965287861950958, -29.29005758953086, -23.7098367363573, -31.27456514429631,
         -29.835279016428, -30.72285400656479, -46.49092903234762, -37.62628477014717, -30.48892995756912, -37.52295698383392, 1.771320876899097,
         -26.09884116522759, -20.86778246757565, -18.74539305915576, 61.630905943273, -40.03897816084442, -3.588576913213299, -63.89537870932907, -16.22867785720476]]
data=np.array(data)
fig=plt.figure()
ax=Axes3D(fig)
ax.scatter(data[0,0:8],data[1,0:8],data[2,0:8],c='r')
ax.scatter(data[0,9:17],data[1,9:17],data[2,9:17],c='g')
ax.scatter(data[0,18:26],data[1,18:26],data[2,18:26],c='b')
ax.scatter(data[0,27:35],data[1,27:35],data[2,27:35],c='m')
ax.set_xlabel("first principal component")
ax.set_ylabel("second principal component")
ax.set_zlabel("third principal component")
plt.show()


testData=[[97.83190412179189, 134.6832097701879, 19.42386353305313, 259.6362805164526, 179.1467249708653, 98.31154172723892,
           303.4651838341876, 133.119825402771, 125.7772615141092, 98.78999152281031, 196.5542020868381, 95.22127602608641],
          [-44.03779090636022, -72.30156242293523, -10.02929570930084, -11.31384732572822, -23.21901488432125, -41.86541884433624,
 -136.7096923180677, 6.214849884354844, -62.79997160757496, -29.3165314167973, 34.59998459583534, -42.7380883024578],
          [-28.85282663273111, -56.44126550355366, -7.149075149178693, 43.60172149864906, -47.60229963897803, -33.49718559243989,
-40.91525261706292, 12.7738945402153, -9.167502179166561, 10.39519855268279, 36.42629366912953, -35.40287829154478]]
testData=np.array(testData)
sigma=np.cov(data)

classes=["blanket","brick","grass","stones"]
for i in range(12):
    dmAll=[]
    for j in range(36):
        dm=np.dot(np.dot(np.transpose(testData[:,i]-data[:,j]),np.linalg.inv(sigma)),testData[:,i]-data[:,j])
        dmAll.append(dm)
    print('%d.'%(i+1),classes[int(np.argmin(dmAll)/9)])


#include <iostream>
#include <vector>
#include "fileIO.h"
#include <algorithm>
#include <math.h>
#include <typeinfo>
#include <opencv2/core.hpp>

using namespace std;
using namespace cv;

int kernel[5][5]={
        {1,4,6,4,1},//Level
        {-1,-2,0,2,1}, //Edge
        {-1,0,2,0,-1}, //Spot
        {-1,2,0,-2,1}, //Wave
        {1,-4,6,-4,1}  //Ripple
};

vector<int**> genLawFilters(){
    int i,j,k;
    vector<int**> filters;
    for(i=0;i<5;i++){
        for(j=0;j<5;j++){
            int** temp=new int*[5];
            for(k=0;k<5;k++) {
                temp[k] = new int[5];
                temp[k][0]=kernel[i][k] * kernel[j][0];
                temp[k][1]=kernel[i][k] * kernel[j][1];
                temp[k][2]=kernel[i][k] * kernel[j][2];
                temp[k][3]=kernel[i][k] * kernel[j][3];
                temp[k][4]=kernel[i][k] * kernel[j][4];
            }
            //push
            filters.push_back(temp);
        }
    }
    if(filters.size()!=25){
        cout<<"wrong Law filters generation"<<endl;
        exit(-1);
    }
    return filters;
}

void deletefilters(vector<int**> filters){
    int i,j,k;
    for(i=0;i<25;i++){
        for(j=0;j<5;j++){
            delete(filters[i][j]);
        }
    }
    for(i=0;i<25;i++){
        delete(filters[i]);
    }
}

vector<double> filterResponse(unsigned char***img, vector<int**> filters, int BytesPerPixel=1, int width=128, int height=128){
    int i,j,k,f;
    vector<double> featureV(25);
    for(f=0;f<25;f++) {
        double totalEnergy=0;

//        if(f==0){
//            for (i = 0; i < height; i++) {
//                for (j = 0; j < width; j++) {
//                    for (k = 0; k < BytesPerPixel; k++) {
//                        int m, n;
//                        double temp = 0;
//                        for (m = -2; m < 3; m++) {
//                            for (n = -2; n < 3; n++) {
//                                //cout<<(int)img[abs(i+m)>=height?abs(i-m):abs(i+m)][abs(j+n)>=width?abs(j-n):abs(j+n)][k]<<endl;
//                                L5L5sum += filters[f][m + 2][n + 2] *
//                                        img[abs(i + m) >= height ? abs(i - m) : abs(i + m)][abs(j + n) >= width ? abs(
//                                                j - n) : abs(j + n)][k] / 255;//normalize
//                            }
//                        }
//                    }
//                }
//            }
//        }
        for (i = 0; i < height; i++) {
            for (j = 0; j < width; j++) {
                for (k = 0; k < BytesPerPixel; k++) {
                    int m, n;
                    double temp = 0;
                    double L5L5sum=0;
                    if(f==0){
                        for (m = -2; m < 3; m++) {
                            for (n = -2; n < 3; n++) {
                                //cout<<(int)img[abs(i+m)>=height?abs(i-m):abs(i+m)][abs(j+n)>=width?abs(j-n):abs(j+n)][k]<<endl;
                                L5L5sum += img[abs(i + m) >= height ? abs(i - m) : abs(i + m)][abs(j + n) >= width ? abs(
                                                j - n) : abs(j + n)][k] / 255.0;//normalize

                            }
                        }
                    }
                    for (m = -2; m < 3; m++) {
                        for (n = -2; n < 3; n++) {
                            //cout<<(int)img[abs(i+m)>=height?abs(i-m):abs(i+m)][abs(j+n)>=width?abs(j-n):abs(j+n)][k]<<endl;
                            if(f==0) {
                                temp += (double)filters[f][m + 2][n + 2] *
                                        (img[abs(i + m) >= height ? abs(i - m) : abs(i + m)][abs(j + n) >= width ? abs(
                                                j - n) : abs(j + n)][k]/ 255.0-L5L5sum/25.0);//normalize
                            }
                            else {
                                temp += (double)filters[f][m + 2][n + 2] *
                                        img[abs(i + m) >= height ? abs(i - m) : abs(i + m)][abs(j + n) >= width ? abs(
                                                j - n) : abs(j + n)][k] / 255.0;//normalize
                            }

                        }
                    }

                    totalEnergy += pow(temp, 2);
                }
            }
        }
        featureV[f] = totalEnergy / (height * width);

    }
    return featureV;
}

vector<vector<double>> allFilterResponse(vector<unsigned char***> imgs,vector<int**> filters){
    vector<vector<double>> featureVectors;
    featureVectors.reserve(imgs.size());
    for(auto& it : imgs){
        featureVectors.push_back(filterResponse(it,filters));
    }
//    int i;
//    for(i =0;i<imgs.size();i++){
//        cout<< typeid(imgs[i]).name()<<endl;
//        featureVectors.push_back(filterResponse(imgs[i],filters));
//
//    }
    return featureVectors;
}

void discriminantPower(vector<vector<double>> FV){
    //FV is 36*25, which has 25 dim of features, each feature has 4 class and 9 observations
    vector<double> DPV;
    int i,j,k,d;
    for(d=0;d<25;d++){//the dth dim
        double overallAverage=0;
        for(k=0;k<36;k++){
            overallAverage+=FV[k][d]/36.0;
        }

        //j=9  i=4
        double class_i_average[4]={0,0,0,0};
        for(i=0;i<4;i++){
            //calculate the average with in class i
            for(j=0;j<9;j++){
                class_i_average[i]+=FV[i*9+j][d]/9.0;
            }
        }

        double intra=0;
        double inter=0;
        for(i=0;i<4;i++){
            for(j=0;j<9;j++){
                intra+=pow(FV[i*9+j][d]-class_i_average[i],2);
                inter+=pow(class_i_average[i]-overallAverage,2);
            }
        }
        double DP=intra/inter;
        DPV.push_back(DP);
        cout<<DP<<", ";
    }

    vector<double>::iterator max=max_element(DPV.begin(),DPV.end());
    vector<double>::iterator min=min_element(DPV.begin(),DPV.end());
    cout<<"strongest: "<<distance(DPV.begin(),max)<<endl;
    cout<<"weakest: "<<distance(DPV.begin(),min)<<endl;
}

vector<unsigned char***> loadTrain(){
    string folderPath="images/train/";
    string texClass[4]={"blanket","brick","grass","stones"};
    vector<unsigned char***> imgs;
    int width=128;
    int height=128;
    int BytesPerPixel=1;
    int i,j,k;
    for(i=0;i<4;i++){//four classes
        for(j=0;j<9;j++){//each class has 9 sources
            string filePath=folderPath+texClass[i]+'_'+to_string(j+1)+".raw";
            unsigned char***img=AllocateMem<unsigned char>(BytesPerPixel,width,height);
            LoadImage(img,filePath,BytesPerPixel,width,height);
            imgs.push_back(img);
        }
    }
    return imgs;
}

vector<unsigned char***> loadTest(){
    string folderPath="images/test/";
    vector<unsigned char***> imgs;
    int width=128;
    int height=128;
    int BytesPerPixel=1;
    int i,j,k;
    for(i=0;i<12;i++){
        string filePath=folderPath+to_string(i+1)+".raw";
        unsigned char***img=AllocateMem<unsigned char>(BytesPerPixel,width,height);
        LoadImage(img,filePath,BytesPerPixel,width,height);
        imgs.push_back(img);
    }
    return imgs;
}

void freeTrain(vector<unsigned char***> imgs){
    int width=128;
    int height=128;
    int BytesPerPixel=1;
    for(auto& it: imgs ){
        FreeImage<unsigned char>(it,BytesPerPixel,width,height);
    }
}

Mat vector2Mat(vector<vector<double>> V){
    int row=V.size(); //if (row!=36) cout<<"wrong rows size"<<endl;
    int col=V[0].size(); //if(col!=25) cout<<"wrong col size"<<endl;
    Mat M=Mat(row,col,CV_64FC1);
    int i,j;
    for(i=0;i<row;i++){
        for(j=0;j<col;j++){
            M.at<double>(i,j)=V[i][j];
        }
    }
    return M;
}

Mat myPCA(Mat M){
    //M: 36:25, we need to compress it to 36*3 and plot
    cv::PCA pca(M,cv::Mat(),PCA::DATA_AS_ROW ,3);
    //cout<<pca.eigenvectors<<endl;
    Mat final=pca.eigenvectors*M.t();
    cout<<final<<endl;
    return pca.eigenvectors;
}

//
//int main() {
//    //**************train
//    vector<int**>filters=genLawFilters();
//    vector<unsigned char***> imgs=loadTrain();
//    vector<vector<double>> featureVectors=allFilterResponse(imgs,filters);//this is the matrix
//    discriminantPower(featureVectors);
//    Mat M=vector2Mat(featureVectors);
//    Mat eigenvectors=myPCA(M);
//
//    //*****************test
//    vector<unsigned char***> testImgs=loadTest();
//    vector<vector<double>> testFV=allFilterResponse(testImgs,filters);
//    Mat testM=vector2Mat(testFV);
//    //cout<<testM<<endl;
//    Mat fuck=eigenvectors*testM.t();
//    //cout<<fuck.t()<<endl;
//
//    deletefilters(filters);
//    freeTrain(imgs);
//    cout<<"success"<<endl;
//    return 0;
//}
//

#include <iostream>
#include <vector>
#include "fileIO.h"
#include <algorithm>
#include <math.h>
#include <typeinfo>
#include <opencv2/core.hpp>
#include <fstream>
using namespace std;
using namespace cv;

int kernel[5][5]={
        {1,4,6,4,1},//Level
        {-1,-2,0,2,1}, //Edge
        {-1,0,2,0,-1}, //Spot
        {-1,2,0,-2,1}, //Wave
        {1,-4,6,-4,1}  //Ripple
};

vector<int**> genLawFilters(){
    int i,j,k;
    vector<int**> filters;
    for(i=0;i<5;i++){
        for(j=0;j<5;j++){
            if(i==0 && j==0) continue;
            int** temp=new int*[5];
            for(k=0;k<5;k++) {
                temp[k] = new int[5];
                temp[k][0]=kernel[i][k] * kernel[j][0];
                temp[k][1]=kernel[i][k] * kernel[j][1];
                temp[k][2]=kernel[i][k] * kernel[j][2];
                temp[k][3]=kernel[i][k] * kernel[j][3];
                temp[k][4]=kernel[i][k] * kernel[j][4];
            }
            //push
            filters.push_back(temp);
        }
    }
    if(filters.size()!=24){
        cout<<"wrong Law filters generation"<<endl;
        exit(-1);
    }
    return filters;
}

void deletefilters(vector<int**> filters){
    int i,j,k;
    for(i=0;i<24;i++){
        for(j=0;j<5;j++){
            delete(filters[i][j]);
        }
    }
    for(i=0;i<24;i++){
        delete(filters[i]);
    }
}

vector<vector<double>> filterResponse(unsigned char***img, vector<int**> filters, int BytesPerPixel=1, int width=128, int height=128){
    int i,j,k,f,p,q;
    vector<vector<double>> FVforallPixels(width*height);
    int windowSize=35;
    ofstream file;
    file.open("Filter Response35.txt",ios::out);

    for (p = 0; p < height; p++) {
        for (q = 0; q < width; q++) {
            vector<double> featureV(24);
            for (f = 0; f < 24; f++) {
                double totalEnergy = 0;
                for (i = p-(windowSize-1)/2; i < p+(windowSize)/2; i++) {
                    for (j = q-(windowSize-1)/2; j <q+(windowSize)/2; j++) {
                        for (k = 0; k < BytesPerPixel; k++) {
                            int m, n;
                            double temp = 0;
                            for (m = -2; m < 3; m++) {
                                for (n = -2; n < 3; n++) {
                                    //cout<<(int)img[abs(i+m)>=height?abs(i-m):abs(i+m)][abs(j+n)>=width?abs(j-n):abs(j+n)][k]<<endl;
                                    temp += (double) filters[f][m + 2][n + 2] *
                                            img[abs(i + m) >= height ? abs(2*height- i - m-1) : abs(i + m)][abs(j + n) >= width
                                                                                                ? abs(
                                                            2*width-j - n-1) : abs(j + n)][k] / 255.0;//normalize
                                }
                            }

                            totalEnergy += pow(temp, 2);
                        }
                    }
                }
                //featureV[f] = totalEnergy /pow(windowSize,2);
                file<<totalEnergy /pow(windowSize,2)<<' ';
            }
            //FVforallPixels.push_back(featureV);
            file<<endl;
        }
        cout<<p<<endl;
    }
    file.close();
    return FVforallPixels;
}



Mat vector2Mat(vector<vector<double>> V){
    int row=V.size(); //if (row!=36) cout<<"wrong rows size"<<endl;
    int col=V[0].size(); //if(col!=25) cout<<"wrong col size"<<endl;
    Mat M=Mat(row,col,CV_64FC1);
    int i,j;
    for(i=0;i<row;i++){
        for(j=0;j<col;j++){
            M.at<double>(i,j)=V[i][j];
        }
    }
    return M;
}

Mat myPCA(Mat M){
    //M: 36:25, we need to compress it to 36*3 and plot
    cv::PCA pca(M,cv::Mat(),PCA::DATA_AS_ROW ,3);
    //cout<<pca.eigenvectors<<endl;
    Mat final=pca.eigenvectors*M.t();
    cout<<final<<endl;
    return pca.eigenvectors;
}

int main() {
    int width=512;
    int height=512;
    int BytesPerPixel=1;
    vector<int**>filters=genLawFilters();
    unsigned char***img=AllocateMem<unsigned char>(BytesPerPixel,width,height);
    unsigned char***imgOut=AllocateMem<unsigned char>(3,width,height);
    LoadImage(img,"images/Mosaic.raw",BytesPerPixel,width,height);
    vector<vector<double>> featureVectors=filterResponse(img,filters,BytesPerPixel,width,height);

    cout<<featureVectors.size()<<endl;
    cout<<featureVectors[0].size()<<endl;

    Mat M=vector2Mat(featureVectors);//should be 512*25
    FreeImage(img,BytesPerPixel,width,height);
    FreeImage(imgOut,3,width,height);
}


#include <fstream>
#include <iostream>
#include "fileIO.h"
#include <stdio.h>
using namespace std;

int main(){
    int width=512;
    int height=512;
    int BytesPerPixel=3;
    unsigned char***imgOut=AllocateMem<unsigned char>(BytesPerPixel,width,height);
    int i,j,k;
    ifstream file;
    file.open("color35.txt",ios::in);
    if(!file.is_open()) cout<<"fail to open file"<<endl;

    for(i=0;i<height;i++){
        for(j=0;j<width;j++){
            char buf;
            file>>buf;
            if(buf=='0'){
                imgOut[i][j][0]=107;
                imgOut[i][j][1]=143;
                imgOut[i][j][2]=159;
            }
            else if(buf=='1'){
                imgOut[i][j][0]=114;
                imgOut[i][j][1]=99;
                imgOut[i][j][2]=107;
            }
            else if(buf=='2'){
                imgOut[i][j][0]=175;
                imgOut[i][j][1]=128;
                imgOut[i][j][2]=74;
            }
            else if(buf=='3'){
                imgOut[i][j][0]=167;
                imgOut[i][j][1]=57;
                imgOut[i][j][2]=32;
            }
            else if(buf=='4'){
                imgOut[i][j][0]=144;
                imgOut[i][j][1]=147;
                imgOut[i][j][2]=104;
            }
            else if(buf=='5'){
                imgOut[i][j][0]=157;
                imgOut[i][j][1]=189;
                imgOut[i][j][2]=204;
            }
        }
    }
    OutputImage(imgOut,"Output/TexSeg35.raw",BytesPerPixel,width,height);
    FreeImage(imgOut,BytesPerPixel,width,height);
}

#ifndef EE569_HW3_8831981929_HANYUNZHAO_FILEIO_H
#define EE569_HW3_8831981929_HANYUNZHAO_FILEIO_H
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <fstream>
#include <string>
using namespace std;

//unsigned char *** AllocateMem(int=3, int=481, int=321);
//
//double *** AllocateMemDouble(int=3, int=481, int height=321);
template<typename T> T *** AllocateMem(int BytesPerPixel=3, int width=481, int height=321){
    // Allocate image data array
    T ***Imagedata;
    Imagedata=new T **[height];
    int i,j,k;
    int cnt=0;
    for(i=0; i<height; i++)
    {
        Imagedata[i]=new T *[width];
        for(j=0; j<width; j++) {
            Imagedata[i][j] = new T[BytesPerPixel];
            for(k=0;k<BytesPerPixel;k++){
                Imagedata[i][j][k]=0;
            }
        }
    }
    return Imagedata;
}


//void LoadImage(unsigned char ***, string, int=3, int=481, int=321);
void LoadImage(unsigned char ***Imagedata, string FilePath,int BytesPerPixel=3,  int width=481, int height=321){
    ifstream file;
    file.open(FilePath,ios::in | ios::binary);
    int i,j,k;
    for(i=0; i<height; i++) {
        for(j=0; j<width; j++) {
            for (k = 0; k < BytesPerPixel; k++) {
                file>>noskipws>>Imagedata[i][j][k];
            }
        }
    }
    file.close();
}

//void ImageOutput(unsigned char ***, string, int=3 , int=481, int=321);
void OutputImage(unsigned char ***ImagedataOut,string FilePath, int BytesPerPixel=3,  int width=481, int height=321){
    ofstream fileout;
    int i,j,k;
    fileout.open(FilePath,ios::binary);
    for(i=0; i<height; i++) {
        for(j=0; j<width; j++) {
            for (k = 0; k < BytesPerPixel; k++) {
                fileout<<noskipws<<ImagedataOut[i][j][k];
            }
        }
    }
    fileout.close();
}

//template<typename T> void FreeImage(T ***, int=3, int=481, int=321);
template<typename T> void FreeImage(T ***Imagedata, int BytesPerPixel=3, int width=481, int height=321){
    int i,j,k;
    for(i=0; i<height; i++) {
        for(j=0; j<width; j++){
            delete [] Imagedata[i][j];
        }
    }
    for(i=0; i<height; i++) {
        delete [] Imagedata[i];
    }
    delete [] Imagedata;
}

//opencv load raw image
//Mat loadRaw(string pathString, int width=576, int height=432, int BytesPerPixel=3){
//    FILE *fp;
//    const char* path=pathString.c_str();
//    fp = fopen(path,"rb+");
//    char*data =(char*)malloc(width*height*BytesPerPixel* sizeof(char));
//    //fread(data, sizeof(float),width*height,fp);
//    fread(data,width*height*BytesPerPixel*sizeof(char),1,fp);
//    Mat image;
//    image.create(height,width,CV_8UC3);
//    memcpy(image.data,data,width*height*BytesPerPixel*sizeof(char));
//    return image;
//}

#endif //EE569_HW3_8831981929_HANYUNZHAO_FILEIO_H



